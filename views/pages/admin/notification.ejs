<style>
    :root {
        --primary-color: #2563eb;
        --secondary-color: #64748b;
        --success-color: #10b981;
        --danger-color: #ef4444;
        --warning-color: #f59e0b;
        --dark-color: #1e293b;
        --light-bg: #f8fafc;
        --border-color: #e2e8f0;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .container-wrapper {
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        animation: slideDown 0.5s ease;
    }

    .page-header h1 {
        color: var(--dark-color);
        font-weight: 700;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .page-header .subtitle {
        color: var(--secondary-color);
        font-size: 1rem;
    }

    .content-card {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        animation: fadeIn 0.6s ease;
    }

    .action-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .search-box {
        position: relative;
        flex: 1;
        max-width: 400px;
    }

    .search-box input {
        width: 100%;
        padding: 12px 45px 12px 20px;
        border: 2px solid var(--border-color);
        border-radius: 50px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
    }

    .search-box input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);
    }

    .search-box i {
        position: absolute;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--secondary-color);
    }

    .btn-custom {
        padding: 12px 24px;
        border-radius: 50px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 10px;
    }

    .btn-primary-custom {
        background: linear-gradient(135deg, var(--primary-color), #3b82f6);
        color: white;
    }

    .btn-primary-custom:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(37, 99, 235, 0.3);
    }

    .notification-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
        margin-bottom: 30px;
    }

    .notification-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        border: 2px solid var(--border-color);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .notification-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color), var(--warning-color));
    }

    .notification-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        border-color: var(--primary-color);
    }

    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 15px;
    }

    .notification-type {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .type-daily {
        background: #dbeafe;
        color: #1e40af;
    }
    .type-weekly {
        background: #fce7f3;
        color: #be185d;
    }
    .type-monthly {
        background: #ede9fe;
        color: #7c3aed;
    }
    .type-yearly {
        background: #fef3c7;
        color: #d97706;
    }
    .type-once {
        background: #d1fae5;
        color: #065f46;
    }
    .type-expiring-accreditation {
        background: #fee2e2;
        color: #b91c1c;
    }

    .notification-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 10px;
    }

    .notification-description {
        color: var(--secondary-color);
        font-size: 0.95rem;
        line-height: 1.5;
        margin-bottom: 15px;
    }

    .notification-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 15px;
        border-top: 1px solid var(--border-color);
    }

    .notification-status {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .status-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    .status-active {
        background: var(--success-color);
    }

    .status-inactive {
        background: var(--secondary-color);
    }

    .notification-actions {
        display: flex;
        gap: 10px;
    }

    .btn-icon {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-edit {
        background: #eff6ff;
        color: var(--primary-color);
    }

    .btn-edit:hover {
        background: var(--primary-color);
        color: white;
    }

    .btn-delete {
        background: #fef2f2;
        color: var(--danger-color);
    }

    .btn-delete:hover {
        background: var(--danger-color);
        color: white;
    }

    .btn-test {
        background: #f0fdf4;
        color: var(--success-color);
    }

    .btn-test:hover {
        background: var(--success-color);
        color: white;
    }

    .modal-custom {
        backdrop-filter: blur(5px);
    }

    .modal-content {
        border-radius: 20px;
        border: none;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        background: linear-gradient(135deg, var(--primary-color), #3b82f6);
        color: white;
        border-radius: 20px 20px 0 0;
        padding: 25px;
    }

    .modal-title {
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .form-label {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 8px;
    }

    .form-control,
    .form-select {
        border: 2px solid var(--border-color);
        border-radius: 10px;
        padding: 12px 15px;
        transition: all 0.3s ease;
    }

    .form-control:focus,
    .form-select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);
    }

    .schedule-config {
        background: var(--light-bg);
        border-radius: 10px;
        padding: 20px;
        margin-top: 15px;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: var(--secondary-color);
    }

    .empty-state i {
        font-size: 4rem;
        color: var(--border-color);
        margin-bottom: 20px;
    }

    .empty-state h3 {
        color: var(--dark-color);
        margin-bottom: 10px;
    }

    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes pulse {
        0%,
        100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }

    @media (max-width: 768px) {
        .notification-grid {
            grid-template-columns: 1fr;
        }

        .action-bar {
            flex-direction: column;
        }

        .search-box {
            max-width: 100%;
        }
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .toast-custom {
        background: white;
        border-radius: 10px;
        padding: 15px 20px;
        margin-bottom: 10px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 15px;
        animation: slideInRight 0.3s ease;
    }

    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>
<div class="container-wrapper">
    <div class="page-header">
        <h1>
            <i class="fas fa-bell"></i>
            Manajemen Notifikasi
        </h1>
        <p class="subtitle">Kelola semua notifikasi dan pengingat sistem akreditasi</p>
    </div>

    <div class="content-card">
        <div class="action-bar">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Cari notifikasi..." />
                <i class="fas fa-search"></i>
            </div>
            <button class="btn-custom btn-primary-custom" onclick="openCreateModal()">
                <i class="fas fa-plus"></i>
                Tambah Notifikasi
            </button>
        </div>

        <div id="notificationContainer" class="notification-grid">
            <!-- Notifications will be loaded here -->
        </div>

        <div id="emptyState" class="empty-state" style="display: none">
            <i class="fas fa-bell-slash"></i>
            <h3>Belum Ada Notifikasi</h3>
            <p>Mulai dengan membuat notifikasi pertama Anda</p>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade" id="notificationModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-bell"></i>
                    <span id="modalTitle">Tambah Notifikasi</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="notificationForm">
                    <input type="hidden" id="notificationId" />

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Tipe Notifikasi</label>
                            <select class="form-select" id="notificationType" onchange="toggleScheduleConfig()">
                                <option value="once">Sekali</option>
                                <option value="daily">Harian</option>
                                <option value="weekly">Mingguan</option>
                                <option value="monthly">Bulanan</option>
                                <option value="yearly">Tahunan</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" id="notificationActive">
                                <option value="true">Aktif</option>
                                <option value="false">Tidak Aktif</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Judul Notifikasi</label>
                        <input type="text" class="form-control" id="notificationTitle" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Deskripsi</label>
                        <textarea class="form-control" id="notificationDescription" rows="3"></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">URL Gambar (Opsional)</label>
                        <input
                            type="text"
                            class="form-control"
                            id="notificationImage"
                            placeholder="https://example.com/image.jpg"
                        />
                    </div>

                    <div id="scheduleConfig" class="schedule-config" style="display: none">
                        <h6 class="mb-3">
                            <i class="fas fa-clock"></i>
                            Konfigurasi Jadwal
                        </h6>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Jam</label>
                                <select class="form-select" id="scheduleHour">
                                    <!-- Hours will be populated by JavaScript -->
                                </select>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Menit</label>
                                <select class="form-select" id="scheduleMinute">
                                    <!-- Minutes will be populated by JavaScript -->
                                </select>
                            </div>
                            <div class="col-md-4 mb-3" id="dayOfWeekGroup" style="display: none">
                                <label class="form-label">Hari</label>
                                <select class="form-select" id="scheduleDayOfWeek">
                                    <option value="1">Senin</option>
                                    <option value="2">Selasa</option>
                                    <option value="3">Rabu</option>
                                    <option value="4">Kamis</option>
                                    <option value="5">Jumat</option>
                                    <option value="6">Sabtu</option>
                                    <option value="0">Minggu</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-3" id="dayOfMonthGroup" style="display: none">
                                <label class="form-label">Tanggal</label>
                                <select class="form-select" id="scheduleDayOfMonth">
                                    <!-- Days will be populated by JavaScript -->
                                </select>
                            </div>
                            <div class="col-md-4 mb-3" id="monthGroup" style="display: none">
                                <label class="form-label">Bulan</label>
                                <select class="form-select" id="scheduleMonth">
                                    <option value="1">Januari</option>
                                    <option value="2">Februari</option>
                                    <option value="3">Maret</option>
                                    <option value="4">April</option>
                                    <option value="5">Mei</option>
                                    <option value="6">Juni</option>
                                    <option value="7">Juli</option>
                                    <option value="8">Agustus</option>
                                    <option value="9">September</option>
                                    <option value="10">Oktober</option>
                                    <option value="11">November</option>
                                    <option value="12">Desember</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                <button type="button" class="btn btn-primary" onclick="saveNotification()">
                    <i class="fas fa-save"></i> Simpan
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle"></i>
                    Konfirmasi Hapus
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Apakah Anda yakin ingin menghapus notifikasi ini?</p>
                <p class="text-danger mb-0">
                    <small>Tindakan ini tidak dapat dibatalkan.</small>
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">
                    <i class="fas fa-trash"></i> Hapus
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container"></div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let notifications = [];
    let deleteId = null;

    // Initialize page
    document.addEventListener("DOMContentLoaded", function () {
        populateTimeSelects();
        loadNotifications();

        // Search functionality
        document.getElementById("searchInput").addEventListener("input", function (e) {
            filterNotifications(e.target.value);
        });
    });

    // Populate time select options
    function populateTimeSelects() {
        const hourSelect = document.getElementById("scheduleHour");
        const minuteSelect = document.getElementById("scheduleMinute");
        const daySelect = document.getElementById("scheduleDayOfMonth");

        // Populate hours (0-23)
        for (let i = 0; i < 24; i++) {
            const option = document.createElement("option");
            option.value = i;
            option.textContent = i.toString().padStart(2, "0") + ":00";
            hourSelect.appendChild(option);
        }

        // Populate minutes (0, 15, 30, 45)
        [0, 15, 30, 45].forEach((min) => {
            const option = document.createElement("option");
            option.value = min;
            option.textContent = min.toString().padStart(2, "0");
            minuteSelect.appendChild(option);
        });

        // Populate days (1-31)
        for (let i = 1; i <= 31; i++) {
            const option = document.createElement("option");
            option.value = i;
            option.textContent = i;
            daySelect.appendChild(option);
        }
    }

    // Load notifications
    async function loadNotifications() {
        try {
            const response = await fetch("/api/notifications");
            if (!response.ok) throw new Error("Failed to load notifications");

            notifications = await response.json();
            renderNotifications(notifications);
        } catch (error) {
            console.error("Error loading notifications:", error);
            showToast("Gagal memuat notifikasi", "error");
        }
    }

    // Render notifications
    function renderNotifications(notificationList) {
        const container = document.getElementById("notificationContainer");
        const emptyState = document.getElementById("emptyState");

        if (notificationList.length === 0) {
            container.innerHTML = "";
            emptyState.style.display = "block";
            return;
        }

        emptyState.style.display = "none";
        container.innerHTML = notificationList.map((notification) => createNotificationCard(notification)).join("");
    }

    // Create notification card HTML
    function createNotificationCard(notification) {
        const typeClass = `type-${notification.type}`;
        const statusClass = notification.active ? "status-active" : "status-inactive";
        const statusText = notification.active ? "Aktif" : "Tidak Aktif";
        const typeLabel = getTypeLabel(notification.type);

        return `
                <div class="notification-card">
                    <div class="notification-header">
                        <span class="notification-type ${typeClass}">${typeLabel}</span>
                    </div>
                    <h3 class="notification-title">${notification.title}</h3>
                    <p class="notification-description">${notification.description || "Tidak ada deskripsi"}</p>
                    <div class="notification-meta">
                        <div class="notification-status">
                            <span class="status-indicator ${statusClass}"></span>
                            <span>${statusText}</span>
                        </div>
                        <div class="notification-actions">
                            ${
                                notification.type !== "expiring-accreditation"
                                    ? `
                                <button class="btn-icon btn-test" onclick="testNotification(${notification.id})" title="Test Kirim">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                                <button class="btn-icon btn-edit" onclick="editNotification(${notification.id})" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn-icon btn-delete" onclick="confirmDelete(${notification.id})" title="Hapus">
                                    <i class="fas fa-trash"></i>
                                </button>
                            `
                                    : ""
                            }
                        </div>
                    </div>
                </div>
            `;
    }

    // Get type label
    function getTypeLabel(type) {
        const labels = {
            once: "Sekali",
            daily: "Harian",
            weekly: "Mingguan",
            monthly: "Bulanan",
            yearly: "Tahunan",
            "expiring-accreditation": "Akreditasi Kadaluarsa",
        };
        return labels[type] || type;
    }

    // Filter notifications
    function filterNotifications(searchTerm) {
        const filtered = notifications.filter(
            (n) =>
                n.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (n.description && n.description.toLowerCase().includes(searchTerm.toLowerCase()))
        );
        renderNotifications(filtered);
    }

    // Open create modal
    function openCreateModal() {
        document.getElementById("modalTitle").textContent = "Tambah Notifikasi";
        document.getElementById("notificationForm").reset();
        document.getElementById("notificationId").value = "";
        document.getElementById("scheduleConfig").style.display = "none";
        new bootstrap.Modal(document.getElementById("notificationModal")).show();
    }

    // Edit notification
    async function editNotification(id) {
        try {
            const response = await fetch(`/api/notifications/${id}`);
            if (!response.ok) throw new Error("Failed to load notification");

            const notification = await response.json();

            document.getElementById("modalTitle").textContent = "Edit Notifikasi";
            document.getElementById("notificationId").value = notification.id;
            document.getElementById("notificationType").value = notification.type;
            document.getElementById("notificationTitle").value = notification.title;
            document.getElementById("notificationDescription").value = notification.description || "";
            document.getElementById("notificationImage").value = notification.image || "";
            document.getElementById("notificationActive").value = notification.active.toString();

            // Set schedule if exists
            if (notification.data && notification.data.schedule) {
                const schedule = notification.data.schedule;
                if (schedule.hour !== undefined) document.getElementById("scheduleHour").value = schedule.hour;
                if (schedule.minute !== undefined) document.getElementById("scheduleMinute").value = schedule.minute;
                if (schedule.dayOfWeek !== undefined)
                    document.getElementById("scheduleDayOfWeek").value = schedule.dayOfWeek;
                if (schedule.dayOfMonth !== undefined)
                    document.getElementById("scheduleDayOfMonth").value = schedule.dayOfMonth;
                if (schedule.month !== undefined) document.getElementById("scheduleMonth").value = schedule.month;
            }

            toggleScheduleConfig();
            new bootstrap.Modal(document.getElementById("notificationModal")).show();
        } catch (error) {
            console.error("Error loading notification:", error);
            showToast("Gagal memuat data notifikasi", "error");
        }
    }

    // Toggle schedule configuration
    function toggleScheduleConfig() {
        const type = document.getElementById("notificationType").value;
        const scheduleConfig = document.getElementById("scheduleConfig");
        const dayOfWeekGroup = document.getElementById("dayOfWeekGroup");
        const dayOfMonthGroup = document.getElementById("dayOfMonthGroup");
        const monthGroup = document.getElementById("monthGroup");

        // Hide all first
        dayOfWeekGroup.style.display = "none";
        dayOfMonthGroup.style.display = "none";
        monthGroup.style.display = "none";

        if (type === "once") {
            scheduleConfig.style.display = "none";
        } else {
            scheduleConfig.style.display = "block";

            if (type === "weekly") {
                dayOfWeekGroup.style.display = "block";
            } else if (type === "monthly") {
                dayOfMonthGroup.style.display = "block";
            } else if (type === "yearly") {
                dayOfMonthGroup.style.display = "block";
                monthGroup.style.display = "block";
            }
        }
    }

    // Save notification
    async function saveNotification() {
        const id = document.getElementById("notificationId").value;
        const type = document.getElementById("notificationType").value;

        const schedule = {};
        if (type !== "once") {
            schedule.hour = parseInt(document.getElementById("scheduleHour").value);
            schedule.minute = parseInt(document.getElementById("scheduleMinute").value);

            if (type === "weekly") {
                schedule.dayOfWeek = parseInt(document.getElementById("scheduleDayOfWeek").value);
            } else if (type === "monthly") {
                schedule.dayOfMonth = parseInt(document.getElementById("scheduleDayOfMonth").value);
            } else if (type === "yearly") {
                schedule.dayOfMonth = parseInt(document.getElementById("scheduleDayOfMonth").value);
                schedule.month = parseInt(document.getElementById("scheduleMonth").value);
            }
        }

        const data = {
            type: type,
            title: document.getElementById("notificationTitle").value,
            description: document.getElementById("notificationDescription").value,
            image: document.getElementById("notificationImage").value,
            active: document.getElementById("notificationActive").value === "true",
            schedule: schedule,
        };

        try {
            const url = id ? `/api/notifications/${id}` : "/api/notifications";
            const method = id ? "PUT" : "POST";

            const response = await fetch(url, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });

            if (!response.ok) throw new Error("Failed to save notification");

            bootstrap.Modal.getInstance(document.getElementById("notificationModal")).hide();
            showToast(id ? "Notifikasi berhasil diperbarui" : "Notifikasi berhasil ditambahkan", "success");
            loadNotifications();
        } catch (error) {
            console.error("Error saving notification:", error);
            showToast("Gagal menyimpan notifikasi", "error");
        }
    }

    // Confirm delete
    function confirmDelete(id) {
        deleteId = id;
        new bootstrap.Modal(document.getElementById("deleteModal")).show();
    }

    // Delete notification
    document.getElementById("confirmDelete").addEventListener("click", async function () {
        if (!deleteId) return;

        try {
            const response = await fetch(`/api/notifications/${deleteId}`, {
                method: "DELETE",
            });

            if (!response.ok) throw new Error("Failed to delete notification");

            bootstrap.Modal.getInstance(document.getElementById("deleteModal")).hide();
            showToast("Notifikasi berhasil dihapus", "success");
            loadNotifications();
        } catch (error) {
            console.error("Error deleting notification:", error);
            showToast("Gagal menghapus notifikasi", "error");
        }
    });

    // Test notification
    async function testNotification(id) {
        try {
            const response = await fetch(`/api/notifications/${id}/test`, {
                method: "POST",
            });

            if (!response.ok) throw new Error("Failed to test notification");

            showToast("Notifikasi test berhasil dikirim", "success");
        } catch (error) {
            console.error("Error testing notification:", error);
            showToast("Gagal mengirim notifikasi test", "error");
        }
    }

    // Show toast
    function showToast(message, type = "info") {
        const toastContainer = document.querySelector(".toast-container");
        const toastId = "toast-" + Date.now();

        const icons = {
            success: "fa-check-circle",
            error: "fa-exclamation-circle",
            info: "fa-info-circle",
        };

        const colors = {
            success: "#10b981",
            error: "#ef4444",
            info: "#3b82f6",
        };

        const toastHtml = `
                <div id="${toastId}" class="toast-custom">
                    <i class="fas ${icons[type]}" style="color: ${colors[type]}; font-size: 1.5rem;"></i>
                    <div>
                        <strong>${type === "success" ? "Berhasil" : type === "error" ? "Error" : "Info"}</strong>
                        <div>${message}</div>
                    </div>
                </div>
            `;

        toastContainer.insertAdjacentHTML("beforeend", toastHtml);

        setTimeout(() => {
            const toast = document.getElementById(toastId);
            if (toast) {
                toast.style.animation = "slideInRight 0.3s ease reverse";
                setTimeout(() => toast.remove(), 300);
            }
        }, 3000);
    }
</script>
